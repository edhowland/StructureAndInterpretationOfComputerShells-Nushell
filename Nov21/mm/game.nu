# game.nu: various helper functions for game play

# Force the input to be displayed on the terminal
def display [] {
  print $"($in)"
}


# Given a string in  the input prints it to stdout
# If the input here is 'BBBB', all black pegs, then true is returned signifying a win
def output [blank: string = ' '] {
  let out = $in
  $out | display
  $out == 'BBBB'
}


# Actually plays the game through multiple plys. The action of game play
# is defined by the passed closure. If the game is won, then the closure
# # should return true, else false in which case it loops till all plys
# are exausted. If that happens, then play returns false
def play [game: closure, turns: int, ply: int = 1] -> bool {
  if $ply > $turns {
    return false  # Because the player lost
  } else if (do $game $ply) {
    return true # The player won
  } else {
    play $game $turns ($ply + 1) # Play again
  }
}


# Prints the rules of the game and exits
def rules [] {
  print $"
The traditional game of MasterMind is played on a board with  rows of holes into
which colored pegs are inserted. The rows are grouped into 2 sets of 4 holes
each with the left group of 4 holes are used by the  code breaker to provide
a guess at the hidden secret code.  There is also often a removable screen
at the top of the board \(from the challenger's perspective\) which obscurs the
actual code. This screen is removed to display the correct answer at the end
of game play.
The 4 holes at the right of the challenger's guess positions are used by the
code maker to provide a hint. with a mix of black or white pegs or empty holes.
  Both the secret code and all of the guesses consist of any permutation of 4
colors from a pallette of 6 possible colors. There can be any number of repeated
colors in the code or any guess. The only disallowed colors are black and white
which are reserved for the hint exclusively.
The game play proceeds thusly:
1. The screen is inserted blocking the view of the 4 code holes.
2. The code maker places any mix of colored pegs in this hidden hole set.
3. The code breaker places a guess in the first set of 4 holes in row 1.
4. The code maker places a  number of black and white pegs  in  right holes.

Steps 3 and 4 are repeated in rows 2 through the last row until the guess matches
the code or until the agreed upon maximum number of guesses is exhausted.
Scoring is different depending on the edition of the game and is not used here.

About the hints:
The hint consists of some combination of black or white pegs or holes
 all of which are significant.

A black peg in any particular hole means that the correct color is matched
there in the correct position.
A white peg in any hole means that the correct color is matched but in the
wrong position.
An empty hole means that some color in some hole is incorrect.

Note: The position of any white pegs are not significant as are the empty
holes. In fact, the code breaker might choose to trick the code breaker
by placing a white peg in the incorrect hole.
How this version is played.
After the intro, the user is asked for a guess which must consist of only 4
characters all lowercase of the first character of the colored peg follwed
by a Enter key.
Here are the colors and characters allowd.

Red: r
Blue: b
Green: g
Yellow: y
Purple: p
Aqua: a


After this has been entered, the hint is generated by comparing the unknown
code and some number of black or white pegs are displayed.

The hint colors

Black: B
White: W
Blank: ' '

If the hint is all black: "BBBB", the player has won and the game exits
and the correct code is displayed with fully spelled out colors:

Blue Red Green Green

If the maximum number of guesses is exhausted, the game is lost and the code is revealed.

The maximum number of guesses is set initially at 8 and cannot exceed 12, but
can be adjusted up or down to change the difficulty of the game.
Screen reader users can pass the '--sr' flag to get the hint displayed as
fully spelled out color names.

An example of game play is now shown using the --sr flag to spell out the
colors:
--- Intro elided

Guess (1)? rbrb
Black White White Black
Guess (2)? rrbb
Black Black Black Black
Congratulations! You are a winner.
This time

The correct code was rrbb
Red Red Blue Blue



Good Luck!

"
  exit
}


#  Plays exactly one round. Checks out for errors in input.
def round [cl: closure,guesses: int] -> bool {
  play (wrap error $cl) $guesses
}
